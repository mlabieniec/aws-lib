import{CognitoIdentityClient as e,GetIdCommand as t,GetCredentialsForIdentityCommand as n}from"@aws-sdk/client-cognito-identity";import{CognitoIdentityProviderClient as i,InitiateAuthCommand as s,SignUpCommand as o,ConfirmSignUpCommand as r,RespondToAuthChallengeCommand as a}from"@aws-sdk/client-cognito-identity-provider";import c from"localstorage-slim";import d from"crypto-js/enc-utf8";import l from"crypto-js/aes";var h={cognitoIdentityPoolID:"us-east-1:3c32a4f0-cd83-4eff-bce8-22144dee7b80",cognitoUserPoolClientID:"fiea480dpek44e71t52qkiipf",cognitoUserpoolID:"us-east-1_MOq2y9G4G",data:"https://hlwkrq00q7.execute-api.us-east-1.amazonaws.com/prod/data",auth:"https://hlwkrq00q7.execute-api.us-east-1.amazonaws.com/prod/auth",google:"677953287897-2brf5vfk5tbs9t7a607tuiu8mjqavaej.apps.googleusercontent.com",id:"74a7c66d-af69-5b3a-b43b-19310b2a23a1",region:"us-east-1"};class u{assertDefined(e,t){if(void 0===e)throw t+" must be defined";return e}assertParametersDefined(e,t,n){if(void 0!==t){t.length>0&&void 0===e&&(e={});for(var i=0;i<t.length;i++)apiGateway.core.utils.contains(n,t[i])||apiGateway.core.utils.assertDefined(e[t[i]],t[i])}}parseParametersToObject(e,t){if(void 0===e)return{};for(var n={},i=0;i<t.length;i++)n[t[i]]=e[t[i]];return n}contains(e,t){if(void 0===e)return!1;for(var n=e.length;n--;)if(e[n]===t)return!0;return!1}copy(e){if(null==e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}mergeInto(e,t){if(null==e||"object"!=typeof e)return e;var n=e.constructor();for(var i in e)e.hasOwnProperty(i)&&(n[i]=e[i]);if(null==t||"object"!=typeof t)return e;for(i in t)t.hasOwnProperty(i)&&(n[i]=t[i]);return n}}const p=require("axios"),g=require("crypto-js");class y{AWS_SHA_256="AWS4-HMAC-SHA256";AWS4_REQUEST="aws4_request";AWS4="AWS4";X_AMZ_DATE="x-amz-date";X_AMZ_SECURITY_TOKEN="x-amz-security-token";HOST="host";AUTHORIZATION="Authorization";client;config;constructor(e){let t={};t.accessKey=u.assertDefined(e.accessKey,"accessKey"),t.secretKey=u.assertDefined(e.secretKey,"secretKey"),t.sessionToken=e.sessionToken,t.serviceName=u.assertDefined(e.serviceName,"serviceName"),t.region=u.assertDefined(e.region,"region"),t.endpoint=u.assertDefined(e.endpoint,"endpoint"),this.client=t,this.config=e}makeRequest(e){var t=u.assertDefined(e.verb,"verb"),n=u.assertDefined(e.path,"path"),i=u.copy(e.queryParams);void 0===i&&(i={});var s=u.copy(e.headers);void 0===s&&(s={}),void 0===s["Content-Type"]&&(s["Content-Type"]=this.config.defaultContentType),void 0===s.Accept&&(s.Accept=this.config.defaultAcceptType);var o=u.copy(e.body);""!==(o=void 0===o||"GET"===t?"":JSON.stringify(o))&&null!=o||delete s["Content-Type"];var r=(new Date).toISOString().replace(/\.\d{3}Z$/,"Z").replace(/[:\-]|\.\d{3}/g,"");s[X_AMZ_DATE]=r;var a=document.createElement("a");a.href=this.client.endpoint,s[HOST]=a.hostname;var c=buildCanonicalRequest(t,n,i,s,o),d=hashCanonicalRequest(c),l=buildCredentialScope(r,this.client.region,this.client.serviceName),h=buildStringToSign(r,l,d),g=calculateSigningKey(this.client.secretKey,r,this.client.region,this.client.serviceName),y=calculateSignature(g,h);s[AUTHORIZATION]=buildAuthorizationHeader(this.client.accessKey,l,s,y),void 0!==awsSigV4Client.sessionToken&&""!==this.client.sessionToken&&(s[X_AMZ_SECURITY_TOKEN]=this.client.sessionToken),delete s[HOST];var f=config.endpoint+n,C=buildCanonicalQueryString(i);return""!=C&&(f+="?"+C),void 0===s["Content-Type"]&&(s["Content-Type"]=config.defaultContentType),p({method:t,url:f,headers:s,data:o})}hash(e){return g.SHA256(e)}hexEncode(e){return e.toString(g.enc.Hex)}hmac(e,t){return g.HmacSHA256(t,e,{asBytes:!0})}buildCanonicalRequest(e,t,n,i,s){return e+"\n"+buildCanonicalUri(t)+"\n"+buildCanonicalQueryString(n)+"\n"+buildCanonicalHeaders(i)+"\n"+buildCanonicalSignedHeaders(i)+"\n"+hexEncode(hash(s))}hashCanonicalRequest(e){return hexEncode(hash(e))}buildCanonicalUri(e){return encodeURI(e)}buildCanonicalQueryString(e){if(Object.keys(e).length<1)return"";var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(n);t.sort();for(var i="",s=0;s<t.length;s++)i+=t[s]+"="+fixedEncodeURIComponent(e[t[s]])+"&";return i.substr(0,i.length-1)}fixedEncodeURIComponent(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}buildCanonicalHeaders(e){var t="",n=[];for(var i in e)e.hasOwnProperty(i)&&n.push(i);n.sort();for(var s=0;s<n.length;s++)t+=n[s].toLowerCase()+":"+e[n[s]]+"\n";return t}buildCanonicalSignedHeaders(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(n.toLowerCase());return t.sort(),t.join(";")}buildStringToSign(e,t,n){return AWS_SHA_256+"\n"+e+"\n"+t+"\n"+n}buildCredentialScope(e,t,n){return e.substr(0,8)+"/"+t+"/"+n+"/"+AWS4_REQUEST}calculateSigningKey(e,t,n,i){return hmac(hmac(hmac(hmac(AWS4+e,t.substr(0,8)),n),i),AWS4_REQUEST)}calculateSignature(e,t){return hexEncode(hmac(e,t))}buildAuthorizationHeader(e,t,n,i){return AWS_SHA_256+" Credential="+e+"/"+t+", SignedHeaders="+buildCanonicalSignedHeaders(n)+", Signature="+i}}const f=require("axios");class C{constructor(e){}makeRequest=function(e){var t=u.assertDefined(e.verb,"verb"),n=u.assertDefined(e.path,"path"),i=u.copy(e.queryParams);void 0===i&&(i={});var s=u.copy(e.headers);void 0===s&&(s={}),void 0===s["Content-Type"]&&(s["Content-Type"]=config.defaultContentType),void 0===s.Accept&&(s.Accept=config.defaultAcceptType);var o=u.copy(e.body);void 0===o&&(o="");var r=config.endpoint+n,a=this.buildCanonicalQueryString(i);return""!=a&&(r+="?"+a),f({method:t,url:r,headers:s,data:o})};buildCanonicalQueryString(e){if(Object.keys(e).length<1)return"";var t="";for(var n in e)e.hasOwnProperty(n)&&(t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n])+"&");return t.substr(0,t.length-1)}}class m{config={};invokeUrl;endpoint;pathComponent;sigV4ClientConfig;simpleHttpClientConfig;sigv4client;httpclient;constructor(e,t){this.config=void 0===e?{accessKey:"",secretKey:"",sessionToken:"",region:"",apiKey:void 0,defaultContentType:"application/json",defaultAcceptType:"application/json"}:e,this.invokeUrl=t,this.endpoint=/(^https?:\/\/[^\/]+)/g.exec(t)[1],this.pathComponent=pathComponent=t.substring(endpoint.length),this.sigV4ClientConfig={...e,serviceName:"execute-api",endpoint:endpoint},void 0!==sigV4ClientConfig.accessKey&&""!==sigV4ClientConfig.accessKey&&void 0!==sigV4ClientConfig.secretKey&&sigV4ClientConfig.secretKey,this.simpleHttpClientConfig={endpoint:endpoint,defaultContentType:e.defaultContentType,defaultAcceptType:e.defaultAcceptType},this.sigv4client=new y(this.sigV4ClientConfig),this.httpclient=new C(this.simpleHttpClientConfig)}request(e={},t="AWS_IAM",n={},i){return void 0!==i&&""!==i&&null!==i&&(e.headers["x-api-key"]=i),void 0!==e.body&&""!==e.body&&null!==e.body&&0!==Object.keys(e.body).length||(e.body=void 0),e.headers=apiGateway.core.utils.mergeInto(e.headers,n.headers),e.queryParams=apiGateway.core.utils.mergeInto(e.queryParams,n.queryParams),"AWS_IAM"===t?this.sigv4client.makeRequest(e):this.httpclient.makeRequest(e)}options(e,t,n){void 0===n&&(n={}),utils.assertParametersDefined(e,[],["body"]);let i={verb:"options".toUpperCase(),path:pathComponent+uritemplate("/data").expand(utils.parseParametersToObject(e,[])),headers:utils.parseParametersToObject(e,[]),queryParams:utils.parseParametersToObject(e,[]),body:t};return this.request(i,authType,n,config.apiKey)}}const S=h.data,v="credentials";class A{exports=h;encryption(e=!0,t="secret-string-to-be-replaced"){c.config.encrypt=!0,c.config.secret="secret-string-to-be-replaced",c.config.encrypter=(e,t)=>l.encrypt(JSON.stringify(e),t).toString(),c.config.decrypter=(e,t)=>{try{return JSON.parse(l.decrypt(e,t).toString(d))}catch(t){return e}}}}class I{apiUrl=new URL(S);sigv4;auth;client;constructor(e){this.auth=e}async request(e=this.apiUrl,t="GET",n,i){this.client=new m({accessKey:auth?this.auth.credentials.AccessKeyId:"",secretKey:auth?this.auth.credentials.SecretKey:"",sessionToken:auth?this.auth.credentials.SessionToken:"",region:h.region,apiKey:n,defaultContentType:"application/json",defaultAcceptType:"application/json"},e.href);try{const e={verb:t};i&&(e.body=i);const n=this.client.request(e);return console.log("Successfully received data: ",n),n}catch(e){throw console.log("An error occurred",e),e}}}class T{cognitoIdentities;cognitoUserPools;clientId;challengeSession;access;credentials;identityId;cognitoProviderLoginName;password="asdfghJKL@5679";AUTH_FLOW={CUSTOM_AUTH:"CUSTOM_AUTH",USERNAME_PASSWORD:"USERNAME_PASSWORD",SRP:"SRP"};AUTH_PROVIDERS={google:"accounts.google.com"};constructor(){this.cognitoIdentities=new e({region:h.region}),this.cognitoUserPools=new i({region:h.region}),this.clientId=h.cognitoUserPoolClientID,this.cognitoProviderLoginName=`cognito-idp.${h.region}.amazonaws.com/${h.cognitoUserPoolID}`,this.init()}async init(){if(c.get(v)){const e=c.get(v);return this.credentials=e.Credentials,void(this.identityId=e.IdentityId)}const e={IdentityPoolId:h.cognitoIdentityPoolID};if(!this.access){const n=new t(e);this.identityId=(await this.cognitoIdentities.send(n)).IdentityId}const i={IdentityId:this.identityId};this.access&&(i.Logins={},i.Logins[this.cognitoProviderLoginName]=this.access.IdToken);const s=new n(i),o=await this.cognitoIdentities.send(s);this.credentials=o.Credentials,this.identityId=o.IdentityId,c.set(v,o)}async initProvider(e,i){const s={IdentityPoolId:h.cognitoIdentityPoolID,Logins:{}};s.Logins[e]=i;const o=new t(s);this.identityId=(await this.cognitoIdentities.send(o)).IdentityId;const r={IdentityId:this.identityId,Logins:{}};r.Logins[e]=i;const a=new n(r),d=await this.cognitoIdentities.send(a);this.credentials=d.Credentials,this.identityId=d.IdentityId,c.set(v,d);const l=new I(this);l.apiUrl=new URL(h.auth),l.initApi(),l.request()}async initAuth(e,t=this.password,n=this.AUTH_FLOW.CUSTOM_AUTH){const i=new s({AuthFlow:n,AuthParameters:{USERNAME:e,PASSWORD:t},ClientId:this.clientId});return this.cognitoUserPools.send(i).then((e=>(this.challengeSession=e.Session,e.Session))).catch((i=>"UserNotFoundException"===i.__type?this.signUp(e,t,n):i.message))}async signUp(e,t=this.password,n=this.AUTH_FLOW.CUSTOM_AUTH){const i=new o({Username:e,Password:t,UserAttributes:n===this.AUTH_FLOW.CUSTOM_AUTH?[{Name:"phone_number",Value:e}]:[],ClientId:this.clientId});return await this.cognitoUserPools.send(i),this.initAuth(e)}async confirm(e,t){if(this.challengeSession)return this.verify(e,t);{const n=new r({ClientId:this.clientId,Username:e,ConfirmationCode:t});await this.cognitoUserPools.send(n),this.initAuth(e)}}async verify(e,t){const n=new a({ChallengeName:"CUSTOM_CHALLENGE",ClientId:this.clientId,ChallengeResponses:{USERNAME:e,ANSWER:t},Session:this.challengeSession});try{const e=await this.cognitoUserPools.send(n);return this.access=e.AuthenticationResult,this.init(),e}catch(e){return e.message}}}export{I as API,T as Auth,A as Config};
