!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@aws-sdk/client-cognito-identity"),require("@aws-sdk/client-cognito-identity-provider"),require("axios"),require("@aws-sdk/signature-v4"),require("@aws-crypto/sha256-js"),require("localstorage-slim"),require("crypto-js/enc-utf8"),require("crypto-js/aes")):"function"==typeof define&&define.amd?define(["exports","@aws-sdk/client-cognito-identity","@aws-sdk/client-cognito-identity-provider","axios","@aws-sdk/signature-v4","@aws-crypto/sha256-js","localstorage-slim","crypto-js/enc-utf8","crypto-js/aes"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).awsLib={},t.clientCognitoIdentity,t.clientCognitoIdentityProvider,t.axios,t.signatureV4,t.sha256Js,t.ls,t.encUTF8,t.AES)}(this,(function(t,e,i,s,n,o,a,c,r){"use strict";var d={cognitoIdentityPoolID:"us-east-1:d8f6f2d0-899f-4dd7-bbc7-516c8426c86b",cognitoUserPoolClientID:"51f790sd540i7tv64pcqnu1lib",cognitoUserpoolID:"us-east-1_dwpAFf6uh",data:"https://75zgfd1n49.execute-api.us-east-1.amazonaws.com/prod/data",auth:"https://75zgfd1n49.execute-api.us-east-1.amazonaws.com/prod/auth",google:"677953287897-2brf5vfk5tbs9t7a607tuiu8mjqavaej.apps.googleusercontent.com",id:"af4e5240-13aa-50a1-ba89-bae5f2573415",region:"us-east-1"};const h=d.data,l="credentials";class g{apiUrl=new URL(h);sigv4;auth;constructor(t){this.auth=t}async initApi(){this.sigv4=new n.SignatureV4({service:"execute-api",region:d.region,credentials:{accessKeyId:this.auth.credentials.AccessKeyId,secretAccessKey:this.auth.credentials.SecretKey,sessionToken:this.auth.credentials.SessionToken},sha256:o.Sha256})}async request(t=this.apiUrl,e="POST",i={}){const n=await this.sigv4.sign({hostname:t.host,path:t.pathname,protocol:t.protocol,headers:{"Content-Type":"application/json"}});try{const{data:o}=await s({...n,url:t.href,method:e,data:JSON.stringify(i)});return console.log("Successfully received data: ",o),o}catch(t){throw console.log("An error occurred",t),t}}}t.API=g,t.Auth=class{cognitoIdentities;cognitoUserPools;clientId;challengeSession;access;credentials;identityId;cognitoProviderLoginName;password="asdfghJKL@5679";AUTH_FLOW={CUSTOM_AUTH:"CUSTOM_AUTH",USERNAME_PASSWORD:"USERNAME_PASSWORD",SRP:"SRP"};AUTH_PROVIDERS={google:"accounts.google.com"};constructor(){this.cognitoIdentities=new e.CognitoIdentityClient({region:d.region}),this.cognitoUserPools=new i.CognitoIdentityProviderClient({region:d.region}),this.clientId=d.cognitoUserPoolClientID,this.cognitoProviderLoginName=`cognito-idp.${d.region}.amazonaws.com/${d.cognitoUserPoolID}`,this.init()}async init(){if(a.get(l)){const t=a.get(l);return this.credentials=t.Credentials,void(this.identityId=t.IdentityId)}const t={IdentityPoolId:d.cognitoIdentityPoolID};if(!this.access){const i=new e.GetIdCommand(t);this.identityId=(await this.cognitoIdentities.send(i)).IdentityId}const i={IdentityId:this.identityId};this.access&&(i.Logins={},i.Logins[this.cognitoProviderLoginName]=this.access.IdToken);const s=new e.GetCredentialsForIdentityCommand(i),n=await this.cognitoIdentities.send(s);this.credentials=n.Credentials,this.identityId=n.IdentityId,a.set(l,n)}async initProvider(t,i){const s={IdentityPoolId:d.cognitoIdentityPoolID,Logins:{}};s.Logins[t]=i;const n=new e.GetIdCommand(s);this.identityId=(await this.cognitoIdentities.send(n)).IdentityId;const o={IdentityId:this.identityId,Logins:{}};o.Logins[t]=i;const c=new e.GetCredentialsForIdentityCommand(o),r=await this.cognitoIdentities.send(c);this.credentials=r.Credentials,this.identityId=r.IdentityId,a.set(l,r);const h=new g(this);h.apiUrl=new URL(d.auth),h.initApi(),h.request()}async initAuth(t,e=this.password,s=this.AUTH_FLOW.CUSTOM_AUTH){const n=new i.InitiateAuthCommand({AuthFlow:s,AuthParameters:{USERNAME:t,PASSWORD:e},ClientId:this.clientId});return this.cognitoUserPools.send(n).then((t=>(this.challengeSession=t.Session,t.Session))).catch((i=>"UserNotFoundException"===i.__type?this.signUp(t,e,s):i.message))}async signUp(t,e=this.password,s=this.AUTH_FLOW.CUSTOM_AUTH){const n=new i.SignUpCommand({Username:t,Password:e,UserAttributes:s===this.AUTH_FLOW.CUSTOM_AUTH?[{Name:"phone_number",Value:t}]:[],ClientId:this.clientId});return await this.cognitoUserPools.send(n),this.initAuth(t)}async confirm(t,e){if(this.challengeSession)return this.verify(t,e);{const s=new i.ConfirmSignUpCommand({ClientId:this.clientId,Username:t,ConfirmationCode:e});await this.cognitoUserPools.send(s),this.initAuth(t)}}async verify(t,e){const s=new i.RespondToAuthChallengeCommand({ChallengeName:"CUSTOM_CHALLENGE",ClientId:this.clientId,ChallengeResponses:{USERNAME:t,ANSWER:e},Session:this.challengeSession});try{const t=await this.cognitoUserPools.send(s);return this.access=t.AuthenticationResult,this.init(),t}catch(t){return t.message}}},t.Config=class{exports=d;encryption(t=!0,e="secret-string-to-be-replaced"){a.config.encrypt=!0,a.config.secret="secret-string-to-be-replaced",a.config.encrypter=(t,e)=>r.encrypt(JSON.stringify(t),e).toString(),a.config.decrypter=(t,e)=>{try{return JSON.parse(r.decrypt(t,e).toString(c))}catch(e){return t}}}}}));
